* —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–∫–∞—à–ª–∏–≤–∞–Ω–∏—è
#+begin_src agda2

{-# OPTIONS --allow-unsolved-metas #-}
module Day3 where

open import Prelude
open import Day1
open import Day2

#+end_src

* It's Bool again
–†–∞–∑—Ä–µ—à–∏–º—ã–µ —Ç–∏–ø—ã –º–æ–≥—É—Ç –±—ã—Ç—å "—É—Ö—É–¥—à–µ–Ω—ã" –¥–æ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–∫–∏–Ω—É—Ç—å —Å–∞–º–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.
–û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ: –í Coq –µ—Å—Ç—å SSReflect, –≤ –µ–≥–æ –æ—Å–Ω–æ–≤–µ –∫–∞–∫ —Ä–∞–∑ –ª–µ–∂–∏—Ç –ø–æ–Ω—è—Ç–∏–µ /boolean reflection/.
–û–Ω–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∫–æ–Ω—Ü–µ–ø—Ç–∞.

#+begin_src agda2

forget-evidence : {A : Type ‚Ñì} ‚Üí Dec A ‚Üí ùîπ
forget-evidence = {!!}

from-boolean-reflection : {A : Type ‚Ñì} (d : Dec A) ‚Üí forget-evidence d ‚â° true ‚Üí A 
from-boolean-reflection = {!!}

to-boolean-reflection : {A : Type ‚Ñì} (d : Dec A) ‚Üí A ‚Üí forget-evidence d ‚â° true
to-boolean-reflection = {!!}

#+end_src

* –ì–∏–±–∫–æ—Å—Ç—å –∑–∞–≤—Ç–∏–ø–æ–≤: —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç–æ–≤, –º–∏–Ω—É—Ç–∫–∞ –ø—Ä–∏–∫–æ–ª–æ–≤ ‚Äî javascript style
–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å ~_>_~ –∫–∞–∫ –∏–Ω–¥—É–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–∏–∫–∞—Ç, –ø–æ–∫–∞–∑–∞—Ç—å —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å.

#+begin_src agda2

data _>·µ¢_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Type‚ÇÄ where
  -- TODO

>·µ¢-dec : (m n : ‚Ñï) ‚Üí Dec (m >·µ¢ n)
>·µ¢-dec = {!!}

>·µ¢‚áî> : (m n : ‚Ñï) ‚Üí (m >·µ¢ n) ‚áî (m > n)
>·µ¢‚áî> = {!!}

_>·µ£_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
m >·µ£ n = forget-evidence (>·µ¢-dec m n)

-- if (n > 0) { return (n * n); } else return false
javascriptIsFun : (n : ‚Ñï) ‚Üí if n >·µ£ 0 then ‚Ñï else ùîπ
javascriptIsFun = {!!}

-- BONUS
‚áî-preserves-Dec : {P Q : Type ‚Ñì} ‚Üí (P ‚áî Q) ‚Üí (Dec P ‚áî Dec Q)
‚áî-preserves-Dec = {!!}

>·µ¢-dec‚ÇÇ : (m n : ‚Ñï) ‚Üí Dec (m >·µ¢ n)
>·µ¢-dec‚ÇÇ m n = snd (‚áî-preserves-Dec (>·µ¢‚áî> m n)) (>-dec m n)

>·µ¢-prop : (m n : ‚Ñï) ‚Üí isProp (m >·µ¢ n)
>·µ¢-prop = {!!}

#+end_src

* –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–¥—É–∫—Ü–∏—è, —ç–ª–∏–º–∏–Ω–∞—Ç–æ—Ä—ã
–ï—â—ë —Ä–∞–∑ –ø—Ä–æ –¥—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (~data~) –∏ –∫–æ–¥–∞–Ω–Ω—ã—Ö (~record~)Ôºü
–û—Ç–ª–∏—á–∏–µ /–∏–Ω–¥—É–∫—Ü–∏–∏/ –æ—Ç /—Ä–µ–∫—É—Ä—Å–∏–∏/.
—Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–Ω–¥—É–∫—Ü–∏—é –¥–ª—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö, –Ω–∞ –¥–æ–º –∏–Ω–¥—É–∫—Ü–∏—è –¥–ª—è ùîπ –∏ List A

#+begin_src agda2

-- nat-ind‚Ä≤ : {P : ‚Ñï ‚Üí Type‚ÇÄ} ‚Üí P 0 ‚Üí ((n : ‚Ñï) ‚Üí P n ‚Üí P (suc n)) ‚Üí (m : ‚Ñï) ‚Üí P m
nat-ind : {P : ‚Ñï ‚Üí ùì§‚ÇÄ} ‚Üí P 0 ‚Üí (Œ† n Íûâ ‚Ñï , (P n ‚áí P (suc n))) ‚Üí Œ† m Íûâ ‚Ñï , P m
nat-ind = {!!}

nat-rec : {R : Type‚ÇÄ} ‚Üí R ‚Üí (R ‚Üí R) ‚Üí (m : ‚Ñï) ‚Üí R
nat-rec {R} z s = nat-ind {P = Œª _ ‚Üí R} z (Œª _ ‚Üí s)

#+end_src

* –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤, —Å—Ç–∏–ª–∏

#+begin_src agda2

-- —Å—é–¥–∞ –∫–ª–∞–¥–∏ –ª–µ–º–º—ã, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ —Ö–æ–¥–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞

#+end_src

** –î–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —à–∞–≥–∞–º–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

#+begin_src agda2

invert-beginner : (a b : ‚Ñï) ‚Üí a + a ‚â° b + b ‚Üí a ‚â° b
invert-beginner = {!!}

#+end_src

** –î–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Å—Ç–∏–ª–µ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–æ–≤

#+begin_src agda2

invert-cylon : (a b : ‚Ñï) ‚Üí a + a ‚â° b + b ‚Üí a ‚â° b
invert-cylon = {!!}

-- suc-inj : {m n : ‚Ñï} ‚Üí suc m ‚â° suc n ‚Üí m ‚â° n
-- suc-inj = {!!}

-- _‚àô_ = trans
-- infixr 8 _‚àô_

-- invert : (a b : ‚Ñï) ‚Üí a + a ‚â° b + b ‚Üí a ‚â° b
-- invert zero zero (refl _) = refl _
-- invert (suc a) (suc b) p = cong suc (invert _ _ (suc-inj ((comm _ a) ‚àô suc-inj p ‚àô comm b _)))

#+end_src

** –î–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ equality reasoning

#+begin_src agda2

invert-reasoning : (a b : ‚Ñï) ‚Üí a + a ‚â° b + b ‚Üí a ‚â° b
invert-reasoning = {!!}

#+end_src
