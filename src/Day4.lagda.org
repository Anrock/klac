* —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–∫–∞—à–ª–∏–≤–∞–Ω–∏—è
#+begin_src agda2

{-# OPTIONS --guardedness --allow-unsolved-metas #-}
module Day4 where

open import Prelude
open import Day1
open import Day2
open import Day3

#+end_src

* –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–¥—É–∫—Ü–∏—è, —ç–ª–∏–º–∏–Ω–∞—Ç–æ—Ä—ã
–û—Ç–ª–∏—á–∏–µ /–∏–Ω–¥—É–∫—Ü–∏–∏/ –æ—Ç /—Ä–µ–∫—É—Ä—Å–∏–∏/.
—Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–Ω–¥—É–∫—Ü–∏—é –¥–ª—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö, –Ω–∞ –¥–æ–º –∏–Ω–¥—É–∫—Ü–∏—è –¥–ª—è ùîπ –∏ List A

#+begin_src agda2

-- nat-ind‚Ä≤ : {P : ‚Ñï ‚Üí Type‚ÇÄ} ‚Üí P 0 ‚Üí ((n : ‚Ñï) ‚Üí P n ‚Üí P (suc n)) ‚Üí (m : ‚Ñï) ‚Üí P m
nat-ind : {P : ‚Ñï ‚Üí ùì§‚ÇÄ} ‚Üí P 0 ‚Üí (Œ† n Íûâ ‚Ñï , (P n ‚áí P (suc n))) ‚Üí Œ† m Íûâ ‚Ñï , P m
nat-ind = {!!}

nat-rec : {R : Type‚ÇÄ} ‚Üí R ‚Üí (R ‚Üí R) ‚Üí (m : ‚Ñï) ‚Üí R
nat-rec {R} z s = nat-ind {P = Œª _ ‚Üí R} z (Œª _ ‚Üí s)

cons-nat-rec-is-id : (m : ‚Ñï) ‚Üí nat-rec {‚Ñï} 0 suc m ‚â° m
cons-nat-rec-is-id = {!!}

list-rec : {A R : Type ‚Ñì} ‚Üí R ‚Üí (A ‚Üí R ‚Üí R) ‚Üí (x : List A) ‚Üí R
list-rec z _   []       = z
list-rec z _‚äï_ (x ‚à∑ xs) = x ‚äï (list-rec z _‚äï_ xs)

map-as-list-rec : {A B : Type ‚Ñì} (f : A ‚Üí B) ‚Üí List A ‚Üí List B
map-as-list-rec f xs = list-rec [] (Œª x acc ‚Üí f x ‚à∑ acc) xs

-- the usual definition
map : {A B : Type ‚Ñì} (f : A ‚Üí B) ‚Üí List A ‚Üí List B
map _ []       = []
map f (x ‚à∑ xs) = f x ‚à∑ map f xs

same-map : {A B : Type ‚Ñì} (f : A ‚Üí B) (xs : List A) ‚Üí map-as-list-rec f xs ‚â° map f xs
same-map = {!!}

cons-list-rec-is-id : {A : Type ‚Ñì} (xs : List A) ‚Üí list-rec [] (_‚à∑_) xs ‚â° xs
cons-list-rec-is-id = {!!}

#+end_src

* –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤, —Å—Ç–∏–ª–∏

#+begin_src agda2

-- you'll need this
_$_ : {A : Type ‚Ñì} {B : A ‚Üí Type ‚Ñì} ‚Üí ((a : A) ‚Üí B a) ‚Üí (x : A) ‚Üí B x
f $ x = f x
infixr 0 _$_

-- —Å—é–¥–∞ –∫–ª–∞–¥–∏ –ª–µ–º–º—ã, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ —Ö–æ–¥–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞

#+end_src

** –î–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —à–∞–≥–∞–º–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

#+begin_src agda2

invert-beginner : (a b : ‚Ñï) ‚Üí a + a ‚â° b + b ‚Üí a ‚â° b
invert-beginner zero zero _ = refl _
invert-beginner (suc a) (suc b) r = {!!}

#+end_src

** –î–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Å—Ç–∏–ª–µ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–æ–≤

#+begin_src agda2

invert-cylon : (a b : ‚Ñï) ‚Üí a + a ‚â° b + b ‚Üí a ‚â° b
invert-cylon zero zero _ = refl _
invert-cylon (suc a) (suc b) r = {!!}
  where
  _‚àô_ = trans
  infixr 8 _‚àô_

#+end_src

** –î–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ equality reasoning

#+begin_src agda2

invert-reasoning : (a b : ‚Ñï) ‚Üí a + a ‚â° b + b ‚Üí a ‚â° b
invert-reasoning zero zero _ = refl _
invert-reasoning (suc a) (suc b) r = {!!}
  where open ‚â°-Reasoning

#+end_src

* –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è

#+begin_src agda2

data RegExp (A : Type ‚Ñì) : Type ‚Ñì where
  √∏    :                       RegExp A
  Œµ    :                       RegExp A
  #_   : A        ‚Üí            RegExp A
  _<>_ : RegExp A ‚Üí RegExp A ‚Üí RegExp A
  _‚à£_  : RegExp A ‚Üí RegExp A ‚Üí RegExp A
  _*   : RegExp A ‚Üí            RegExp A
infixr 5 _<>_

private
  variable
    A : Type ‚Ñì
    x : A
    s s‚ÇÅ s‚ÇÇ : List A
    re re‚ÇÅ re‚ÇÇ : RegExp A

infix 0 _=~_
data _=~_ {A : Type ‚Ñì} : List A ‚Üí RegExp A ‚Üí Type ‚Ñì where
  MEmpty  : []     =~ Œµ
  MChar   : x ‚à∑ [] =~ # x
  MApp    : s‚ÇÅ =~ re‚ÇÅ ‚Üí
            s‚ÇÇ =~ re‚ÇÇ ‚Üí
            s‚ÇÅ ++ s‚ÇÇ =~ re‚ÇÅ <> re‚ÇÇ
  MUnionL : s‚ÇÅ =~ re‚ÇÅ ‚Üí
            s‚ÇÅ =~ re‚ÇÅ ‚à£ re‚ÇÇ
  MUnionR : s‚ÇÇ =~ re‚ÇÇ ‚Üí
            s‚ÇÇ =~ re‚ÇÅ ‚à£ re‚ÇÇ
  MStar0  : [] =~ re *
  MStarS  : s‚ÇÅ =~ re ‚Üí
            s‚ÇÇ =~ re * ‚Üí
            s‚ÇÅ ++ s‚ÇÇ =~ re *

ex‚ÇÅ : 1 ‚à∑ [] =~ # 1
ex‚ÇÅ = MChar

ex‚ÇÇ : 1 ‚à∑ 2 ‚à∑ [] =~ # 1 <> # 2
ex‚ÇÇ = MApp MChar MChar

ex‚ÇÉ : ¬¨ (1 ‚à∑ 2 ‚à∑ [] =~ # 1)
ex‚ÇÉ ()

reList : List A ‚Üí RegExp A
reList []       = Œµ
reList (x ‚à∑ xs) = # x <> reList xs

ex‚ÇÑ : 1 ‚à∑ 2 ‚à∑ 3 ‚à∑ [] =~ reList (1 ‚à∑ 2 ‚à∑ 3 ‚à∑ [])
ex‚ÇÑ = MApp MChar (MApp MChar (MApp MChar MEmpty))

matchStar : (s =~ re) ‚Üí (s =~ re *)
matchStar {re = re} x = subst (_=~ re *) nil-right-neutral (MStarS x MStar0)
  where
  nil-right-neutral : s ++ [] ‚â° s
  nil-right-neutral = {!!}

#+end_src

* –ë—Ä–∏—Ç–≤–∞ –•–∞—Ç—Ç–æ–Ω–∞
–¢–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–π —è–∑—ã–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å –≤—Å–µ–≥–æ –¥–≤–∞ –≤–∏–¥–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–π: –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Å–ª–æ–∂–µ–Ω–∏—è.

#+begin_src agda2

data Exp : Type‚ÇÄ where
  Const : ‚Ñï ‚Üí Exp
  _Ôºã_  : Exp ‚Üí Exp ‚Üí Exp

#+end_src
