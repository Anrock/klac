* —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–∫–∞—à–ª–∏–≤–∞–Ω–∏—è
#+begin_src agda2

{-# OPTIONS --allow-unsolved-metas #-}
module Day3 where

open import Prelude
open import Day1
open import Day2
open import Day3

#+end_src

* –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–¥—É–∫—Ü–∏—è, —ç–ª–∏–º–∏–Ω–∞—Ç–æ—Ä—ã
–û—Ç–ª–∏—á–∏–µ /–∏–Ω–¥—É–∫—Ü–∏–∏/ –æ—Ç /—Ä–µ–∫—É—Ä—Å–∏–∏/.
—Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–Ω–¥—É–∫—Ü–∏—é –¥–ª—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö, –Ω–∞ –¥–æ–º –∏–Ω–¥—É–∫—Ü–∏—è –¥–ª—è ùîπ –∏ List A

#+begin_src agda2

-- nat-ind‚Ä≤ : {P : ‚Ñï ‚Üí Type‚ÇÄ} ‚Üí P 0 ‚Üí ((n : ‚Ñï) ‚Üí P n ‚Üí P (suc n)) ‚Üí (m : ‚Ñï) ‚Üí P m
nat-ind : {P : ‚Ñï ‚Üí ùì§‚ÇÄ} ‚Üí P 0 ‚Üí (Œ† n Íûâ ‚Ñï , (P n ‚áí P (suc n))) ‚Üí Œ† m Íûâ ‚Ñï , P m
nat-ind = {!!}

nat-rec : {R : Type‚ÇÄ} ‚Üí R ‚Üí (R ‚Üí R) ‚Üí (m : ‚Ñï) ‚Üí R
nat-rec {R} z s = nat-ind {P = Œª _ ‚Üí R} z (Œª _ ‚Üí s)

#+end_src

* –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤, —Å—Ç–∏–ª–∏

#+begin_src agda2

-- —Å—é–¥–∞ –∫–ª–∞–¥–∏ –ª–µ–º–º—ã, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ —Ö–æ–¥–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞

#+end_src

** –î–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —à–∞–≥–∞–º–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

#+begin_src agda2

invert-beginner : (a b : ‚Ñï) ‚Üí a + a ‚â° b + b ‚Üí a ‚â° b
invert-beginner = {!!}

#+end_src

** –î–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Å—Ç–∏–ª–µ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–æ–≤

#+begin_src agda2

invert-cylon : (a b : ‚Ñï) ‚Üí a + a ‚â° b + b ‚Üí a ‚â° b
invert-cylon = {!!}

-- suc-inj : {m n : ‚Ñï} ‚Üí suc m ‚â° suc n ‚Üí m ‚â° n
-- suc-inj = {!!}

-- _‚àô_ = trans
-- infixr 8 _‚àô_

-- invert : (a b : ‚Ñï) ‚Üí a + a ‚â° b + b ‚Üí a ‚â° b
-- invert zero zero (refl _) = refl _
-- invert (suc a) (suc b) p = cong suc (invert _ _ (suc-inj ((comm _ a) ‚àô suc-inj p ‚àô comm b _)))

#+end_src

** –î–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ equality reasoning

#+begin_src agda2

invert-reasoning : (a b : ‚Ñï) ‚Üí a + a ‚â° b + b ‚Üí a ‚â° b
invert-reasoning = {!!}

#+end_src
